// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.NoSuchElementException;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.compare.EcrfRevisionComparator;
import org.phoenixctms.ctsms.compare.VOIDComparator;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CategoryCriterion.EmptyPrefixModes;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.vo.ECRFInVO;
import org.phoenixctms.ctsms.vo.ECRFOutVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandGroupOutVO;
import org.phoenixctms.ctsms.vo.ProbandListStatusTypeVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VisitOutVO;

public class ECRFDaoImpl
		extends ECRFDaoBase {

	private final static VOIDComparator PROBAND_GROUP_ID_COMPARATOR = new VOIDComparator<ProbandGroupOutVO>(false);
	private static final String UNIQUE_ECRF_NAME = "{0} - {1}";
	private static final String UNIQUE_ECRF_NAME_REVISION = "{0} - {1} ({2})";
	EcrfRevisionComparator ECRF_REVISION_COMPARATOR = new EcrfRevisionComparator();

	private static String getUniqueEcrfName(ECRFOutVO ecrfVO) {
		if (ecrfVO != null && ecrfVO.getTrial() != null) {
			if (ecrfVO.getRevision() != null && ecrfVO.getRevision().length() > 0) {
				return MessageFormat.format(UNIQUE_ECRF_NAME_REVISION, ecrfVO.getTrial().getName(), ecrfVO.getName(), ecrfVO.getRevision());
			} else {
				return MessageFormat.format(UNIQUE_ECRF_NAME, ecrfVO.getTrial().getName(), ecrfVO.getName());
			}
		}
		return null;
	}

	private org.hibernate.Criteria createEcrfCriteria(String alias) {
		org.hibernate.Criteria ecrfCriteria;
		if (alias != null && alias.length() > 0) {
			ecrfCriteria = this.getSession().createCriteria(ECRF.class, alias);
		} else {
			ecrfCriteria = this.getSession().createCriteria(ECRF.class);
		}
		return ecrfCriteria;
	}

	@Override
	public ECRF eCRFInVOToEntity(ECRFInVO eCRFInVO) {
		ECRF entity = this.loadECRFFromECRFInVO(eCRFInVO);
		this.eCRFInVOToEntity(eCRFInVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFInVOToEntity(
			ECRFInVO source,
			ECRF target,
			boolean copyIfNull) {
		super.eCRFInVOToEntity(source, target, copyIfNull);
		Long trialId = source.getTrialId();
		Long visitId = source.getVisitId();
		Long probandListStatusId = source.getProbandListStatusId();
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addEcrfs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfs(target);
			}
		}
		if (visitId != null) {
			Visit visit = this.getVisitDao().load(visitId);
			target.setVisit(visit);
			visit.addEcrfs(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeEcrfs(target);
			}
		}
		Collection groupIds;
		if ((groupIds = source.getGroupIds()).size() > 0 || copyIfNull) {
			target.setGroups(toProbandGroupSet(groupIds));
		}
		if (probandListStatusId != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().load(probandListStatusId));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
	}

	private HashSet<ProbandGroup> toProbandGroupSet(Collection<Long> probandGroupIds) { // lazyload persistentset prevention
		ProbandGroupDao probandGroupDao = this.getProbandGroupDao();
		HashSet<ProbandGroup> result = new HashSet<ProbandGroup>(probandGroupIds.size());
		Iterator<Long> it = probandGroupIds.iterator();
		while (it.hasNext()) {
			result.add(probandGroupDao.load(it.next()));
		}
		return result;
	}

	private ArrayList<ProbandGroupOutVO> toProbandGroupOutVOCollection(Collection<ProbandGroup> groups) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		ProbandGroupDao probandGroupDao = this.getProbandGroupDao();
		ArrayList<ProbandGroupOutVO> result = new ArrayList<ProbandGroupOutVO>(groups.size());
		Iterator<ProbandGroup> it = groups.iterator();
		while (it.hasNext()) {
			result.add(probandGroupDao.toProbandGroupOutVO(it.next()));
		}
		Collections.sort(result, PROBAND_GROUP_ID_COMPARATOR);
		return result;
	}

	@Override
	public ECRF eCRFOutVOToEntity(ECRFOutVO eCRFOutVO) {
		ECRF entity = this.loadECRFFromECRFOutVO(eCRFOutVO);
		this.eCRFOutVOToEntity(eCRFOutVO, entity, true);
		return entity;
	}

	@Override
	public void eCRFOutVOToEntity(
			ECRFOutVO source,
			ECRF target,
			boolean copyIfNull) {
		super.eCRFOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		VisitOutVO visitVO = source.getVisit();
		ProbandListStatusTypeVO probandListStatusVO = source.getProbandListStatus();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addEcrfs(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEcrfs(target);
			}
		}
		if (visitVO != null) {
			Visit visit = this.getVisitDao().visitOutVOToEntity(visitVO);
			target.setVisit(visit);
			visit.addEcrfs(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeEcrfs(target);
			}
		}
		Collection groups = source.getGroups();
		if (groups.size() > 0) {
			groups = new ArrayList(groups); //prevent changing VO
			this.getProbandGroupDao().probandGroupOutVOToEntityCollection(groups);
			target.setGroups(groups); // hashset-exception!!!
		} else if (copyIfNull) {
			target.getGroups().clear();
		}
		if (probandListStatusVO != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().probandListStatusTypeVOToEntity(probandListStatusVO));
		} else if (copyIfNull) {
			target.setProbandListStatus(null);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	@Override
	protected ECRF handleFindByMaxRevision(Long trialId, String name, String revisionPattern) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		ecrfCriteria.add(Restrictions.eq("name", name));
		ecrfCriteria.add(Restrictions.like("revision", revisionPattern, MatchMode.EXACT));
		try {
			return (ECRF) Collections.max(ecrfCriteria.list(), ECRF_REVISION_COMPARATOR);
		} catch (NoSuchElementException e) {
			return null;
		}
	}

	@Override
	protected Collection<ECRF> handleFindByListEntryActiveSorted(Long probandListEntryId, Boolean active, boolean sort, PSFVO psf) throws Exception {
		ProbandListEntry listEntry = this.getProbandListEntryDao().load(probandListEntryId);
		Long trialId = listEntry.getTrial().getId();
		Long groupId = (listEntry.getGroup() != null ? listEntry.getGroup().getId() : null);
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		if (groupId != null) {
			// http://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			Criteria ecrfFieldCriteria = ecrfCriteria.createCriteria("ecrfFields", CriteriaSpecification.LEFT_JOIN);
			Criteria ecrfFieldValueCriteria = ecrfFieldCriteria.createCriteria("fieldValues", "ecrfFieldValues", CriteriaSpecification.LEFT_JOIN);
			if (active != null) {
				ecrfCriteria.add(Restrictions.or(
						Restrictions.and(
								Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
										Restrictions.isNull("probandGroups.id")),
								Restrictions.eq("active", active.booleanValue())),
						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
			} else {
				ecrfCriteria.add(Restrictions.or(
						Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
								Restrictions.isNull("probandGroups.id")),
						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
			}
		} else {
			if (active != null) {
				// http://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags
				Criteria ecrfFieldCriteria = ecrfCriteria.createCriteria("ecrfFields", CriteriaSpecification.LEFT_JOIN);
				Criteria ecrfFieldValueCriteria = ecrfFieldCriteria.createCriteria("fieldValues", "ecrfFieldValues", CriteriaSpecification.LEFT_JOIN);
				ecrfCriteria.add(Restrictions.or(
						Restrictions.eq("active", active.booleanValue()),
						Restrictions.eq("ecrfFieldValues.listEntry.id", probandListEntryId.longValue())));
			}
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.isNull("probandGroups.id"));
		}
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this);
	}

	@Override
	protected Collection<ECRF> handleFindByTrialActiveSorted(Long trialId, Boolean active, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this); //ecrf.groups filter
	}

	@Override
	protected Collection<ECRF> handleFindByTrialGroupVisitActiveSorted(Long trialId, Long groupId, Long visitId, Boolean active, boolean sort, PSFVO psf) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(ECRF.class, ecrfCriteria);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		}
		if (visitId != null) {
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("visit.id", visitId.longValue()),
					Restrictions.isNull("visit.id")));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (sort) {
			if (psf == null) {
				psf = new PSFVO();
			}
			psf.setSortField("name");
			psf.setSortOrder(true);
		}
		return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this); //ecrf.groups filter
	}

	@Override
	protected Collection<ECRF> handleFindCollidingTrialNameRevision(
			Long trialId, String name, String revision) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (name != null) {
			ecrfCriteria.add(Restrictions.eq("name", name));
		}
		CategoryCriterion.apply(ecrfCriteria, new CategoryCriterion(revision, "revision", MatchMode.EXACT, EmptyPrefixModes.EMPTY_ROWS));
		return ecrfCriteria.list();
	}

	@Override
	protected long handleGetCount(Long probandListEntryId, Long visitId, Boolean active, Long ecrfStatusTypeId, Boolean done)
			throws Exception {
		ProbandListEntry listEntry = this.getProbandListEntryDao().load(probandListEntryId);
		Long trialId = listEntry.getTrial().getId();
		Long groupId = (listEntry.getGroup() != null ? listEntry.getGroup().getId() : null);
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria("ecrf0");
		if (visitId != null) {
			ecrfCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		if (ecrfStatusTypeId != null || done != null) {
			org.hibernate.Criteria ecrfStatusEntryCriteria = ecrfCriteria.createCriteria("ecrfStatusEntries", "statusEntries",
					CriteriaSpecification.LEFT_JOIN,
					Restrictions.and(
							Restrictions.eqProperty("statusEntries.ecrf.id", "ecrf0.id"),
							Restrictions.eq("statusEntries.listEntry.id", probandListEntryId.longValue())));
			org.hibernate.Criteria ecrfStatusTypeCriteria = ecrfStatusEntryCriteria.createCriteria("status", CriteriaSpecification.LEFT_JOIN);
			if (ecrfStatusTypeId != null) {
				ecrfStatusTypeCriteria.add(Restrictions.idEq(ecrfStatusTypeId.longValue()));
			}
			if (done != null) {
				ecrfStatusTypeCriteria.add(Restrictions.eq("done", done.booleanValue()));
			}
		}
		return (Long) ecrfCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	@Override
	protected long handleGetCount(Long trialId, Long groupId, Long visitId, Boolean active) throws Exception {
		org.hibernate.Criteria ecrfCriteria = createEcrfCriteria(null);
		if (trialId != null) {
			ecrfCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			Criteria probandGroupCriteria = ecrfCriteria.createCriteria("groups", "probandGroups", CriteriaSpecification.LEFT_JOIN);
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("probandGroups.id", groupId.longValue()),
					Restrictions.isNull("probandGroups.id")));
		}
		if (visitId != null) {
			ecrfCriteria.add(Restrictions.or(Restrictions.eq("visit.id", visitId.longValue()),
					Restrictions.isNull("visit.id")));
		}
		if (active != null) {
			ecrfCriteria.add(Restrictions.eq("active", active.booleanValue()));
		}
		return (Long) ecrfCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRF loadECRFFromECRFInVO(ECRFInVO eCRFInVO) {
		ECRF ecrf = null;
		Long id = eCRFInVO.getId();
		if (id != null) {
			ecrf = this.load(id);
		}
		if (ecrf == null) {
			ecrf = ECRF.Factory.newInstance();
		}
		return ecrf;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRF loadECRFFromECRFOutVO(ECRFOutVO eCRFOutVO) {
		ECRF ecrf = this.load(eCRFOutVO.getId());
		if (ecrf == null) {
			ecrf = ECRF.Factory.newInstance();
		}
		return ecrf;
	}

	@Override
	public ECRFInVO toECRFInVO(final ECRF entity) {
		return super.toECRFInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFInVO(
			ECRF source,
			ECRFInVO target) {
		super.toECRFInVO(source, target);
		Trial trial = source.getTrial();
		Visit visit = source.getVisit();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (visit != null) {
			target.setVisitId(visit.getId());
		}
		target.setGroupIds(toProbandGroupIdCollection(source.getGroups()));
		if (probandListStatus != null) {
			target.setProbandListStatusId(probandListStatus.getId());
		}
	}

	public static ArrayList<Long> toProbandGroupIdCollection(Collection<ProbandGroup> groups) { // lazyload persistentset prevention
		ArrayList<Long> result = new ArrayList<Long>(groups.size());
		Iterator<ProbandGroup> it = groups.iterator();
		while (it.hasNext()) {
			result.add(it.next().getId());
		}
		Collections.sort(result); // InVO ID sorting
		return result;
	}

	@Override
	public ECRFOutVO toECRFOutVO(final ECRF entity) {
		return super.toECRFOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFOutVO(
			ECRF source,
			ECRFOutVO target) {
		super.toECRFOutVO(source, target);
		Trial trial = source.getTrial();
		Visit visit = source.getVisit();
		ProbandListStatusType probandListStatus = source.getProbandListStatus();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (visit != null) {
			target.setVisit(this.getVisitDao().toVisitOutVO(visit));
		}
		target.setGroups(toProbandGroupOutVOCollection(source.getGroups()));
		if (probandListStatus != null) {
			target.setProbandListStatus(this.getProbandListStatusTypeDao().toProbandListStatusTypeVO(probandListStatus));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setUniqueName(getUniqueEcrfName(target));
	}
}