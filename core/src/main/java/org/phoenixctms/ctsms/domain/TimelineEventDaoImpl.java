// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.adapt.ReminderEntityAdapter;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.EventImportanceVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.TimelineEventInVO;
import org.phoenixctms.ctsms.vo.TimelineEventOutVO;
import org.phoenixctms.ctsms.vo.TimelineEventTypeVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VariablePeriodVO;

/**
 * @see TimelineEvent
 */
public class TimelineEventDaoImpl
		extends TimelineEventDaoBase {

	private org.hibernate.Criteria createTimelineEventCriteria() {
		org.hibernate.Criteria timelineEventCriteria = this.getSession().createCriteria(TimelineEvent.class);
		return timelineEventCriteria;
	}

	@Override
	protected Collection<TimelineEvent> handleFindByTrial(
			Long trialId, PSFVO psf) throws Exception {
		Criteria timelineEventCriteria = createTimelineEventCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(TimelineEvent.class, timelineEventCriteria);
		if (trialId != null) {
			timelineEventCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return timelineEventCriteria.list();
	}

	@Override
	protected Collection<TimelineEvent> handleFindByTrialDepartmentMemberInterval(
			Long trialId, Long departmentId, Long teamMemberStaffId, Boolean notify, Boolean ignoreTimelineEvents, Timestamp from, Timestamp to)
			throws Exception {
		Criteria timelineEventCriteria = createTimelineEventCriteria();
		CriteriaUtil.applyStopOptionalIntervalCriterion(timelineEventCriteria, from, to, null, true);
		boolean distinctRoot = false;
		if (trialId != null || departmentId != null || teamMemberStaffId != null || ignoreTimelineEvents != null) {
			Criteria trialCriteria = timelineEventCriteria.createCriteria("trial", CriteriaSpecification.INNER_JOIN);
			if (trialId != null) {
				trialCriteria.add(Restrictions.idEq(trialId.longValue()));
			}
			if (departmentId != null) {
				trialCriteria.add(Restrictions.eq("department.id", departmentId.longValue()));
			}
			if (ignoreTimelineEvents != null) {
				trialCriteria.createCriteria("status", CriteriaSpecification.INNER_JOIN).add(Restrictions.eq("ignoreTimelineEvents", ignoreTimelineEvents.booleanValue()));
			}
			if (teamMemberStaffId != null) {
				Criteria membersCriteria = trialCriteria.createCriteria("members", CriteriaSpecification.INNER_JOIN);
				if (notify != null) {
					membersCriteria.add(Restrictions.eq("notifyTimelineEvent", notify.booleanValue()));
				}
				membersCriteria.add(Restrictions.eq("staff.id", teamMemberStaffId.longValue()));
				distinctRoot = true;
			}
		}
		timelineEventCriteria.add(Restrictions.eq("dismissed", false)); // performance only...
		if (distinctRoot) {
			return CriteriaUtil.listEvents(CriteriaUtil.listDistinctRoot(timelineEventCriteria, this), from, to, notify);
		} else {
			return CriteriaUtil.listEvents(timelineEventCriteria, from, to, notify);
		}
	}

	@Override
	protected Collection<TimelineEvent> handleFindByTrialDepartmentStatusTypeShowInterval(
			Long trialId, Long departmentId, Long statusId, Long typeId,
			Boolean show, Timestamp from, Timestamp to) throws Exception {
		Criteria timelineEventCriteria = createTimelineEventCriteria();
		CriteriaUtil.applyStopOptionalIntervalCriterion(timelineEventCriteria, from, to, null, true);
		if (trialId != null || departmentId != null || statusId != null) {
			Criteria trialCriteria = timelineEventCriteria.createCriteria("trial", CriteriaSpecification.INNER_JOIN);
			if (trialId != null) {
				trialCriteria.add(Restrictions.idEq(trialId.longValue()));
			}
			if (departmentId != null) {
				trialCriteria.add(Restrictions.eq("department.id", departmentId.longValue()));
			}
			if (statusId != null) {
				trialCriteria.add(Restrictions.eq("status.id", statusId.longValue()));
			}
		}
		if (typeId != null) {
			timelineEventCriteria.add(Restrictions.eq("type.id", typeId.longValue()));
		}
		if (show != null) {
			timelineEventCriteria.add(Restrictions.eq("show", show.booleanValue()));
		}
		return timelineEventCriteria.list();
	}

	@Override
	protected Collection<TimelineEvent> handleFindTimelineSchedule(Date today,
			Long trialId, Long departmentId, Long teamMemberStaffId, Boolean notify, Boolean ignoreTimelineEvents, boolean includeAlreadyPassed, PSFVO psf)
			throws Exception {
		Criteria timelineEventCriteria = createTimelineEventCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(TimelineEvent.class, timelineEventCriteria);
		if (trialId != null) {
			timelineEventCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (departmentId != null) {
			criteriaMap.createCriteria("trial").add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (ignoreTimelineEvents != null) {
			criteriaMap.createCriteria("trial.status").add(Restrictions.eq("ignoreTimelineEvents", ignoreTimelineEvents.booleanValue()));
		}
		if (teamMemberStaffId != null) {
			criteriaMap.createCriteria("trial.members").add(Restrictions.eq("staff.id", teamMemberStaffId.longValue())); // unique staff!
			if (notify != null) {
				criteriaMap.createCriteria("trial.members").add(Restrictions.eq("notifyTimelineEvent", notify.booleanValue()));
			}
		}
		timelineEventCriteria.add(Restrictions.eq("dismissed", false)); // performance only...
		if (psf != null) {
			PSFVO sorterFilter = new PSFVO();
			sorterFilter.setFilters(psf.getFilters());
			sorterFilter.setSortField(psf.getSortField());
			sorterFilter.setSortOrder(psf.getSortOrder());
			CriteriaUtil.applyPSFVO(criteriaMap, sorterFilter); // staff is not unique in team members
		} else {
			timelineEventCriteria.setResultTransformer(CriteriaSpecification.ROOT_ENTITY);
		}
		ArrayList<TimelineEvent> resultSet = CriteriaUtil.listReminders(timelineEventCriteria, today, notify, includeAlreadyPassed, null, null);
		return CriteriaUtil.applyPVO(resultSet, psf, teamMemberStaffId != null); // no dupes here any more
	}

	@Override
	protected long handleGetCount(
			Long trialId) throws Exception {
		Criteria timelineEventCriteria = createTimelineEventCriteria();
		if (trialId != null) {
			timelineEventCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		return (Long) timelineEventCriteria.setProjection(Projections.rowCount()).uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private TimelineEvent loadTimelineEventFromTimelineEventInVO(TimelineEventInVO timelineEventInVO) {
		TimelineEvent timelineEvent = null;
		Long id = timelineEventInVO.getId();
		if (id != null) {
			timelineEvent = this.load(id);
		}
		if (timelineEvent == null) {
			timelineEvent = TimelineEvent.Factory.newInstance();
		}
		return timelineEvent;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private TimelineEvent loadTimelineEventFromTimelineEventOutVO(TimelineEventOutVO timelineEventOutVO) {
		TimelineEvent timelineEvent = this.load(timelineEventOutVO.getId());
		if (timelineEvent == null) {
			timelineEvent = TimelineEvent.Factory.newInstance();
		}
		return timelineEvent;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TimelineEvent timelineEventInVOToEntity(TimelineEventInVO timelineEventInVO) {
		TimelineEvent entity = this.loadTimelineEventFromTimelineEventInVO(timelineEventInVO);
		this.timelineEventInVOToEntity(timelineEventInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void timelineEventInVOToEntity(
			TimelineEventInVO source,
			TimelineEvent target,
			boolean copyIfNull) {
		super.timelineEventInVOToEntity(source, target, copyIfNull);
		Long typeId = source.getTypeId();
		Long trialId = source.getTrialId();
		if (typeId != null) {
			target.setType(this.getTimelineEventTypeDao().load(typeId));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addEvents(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEvents(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TimelineEvent timelineEventOutVOToEntity(TimelineEventOutVO timelineEventOutVO) {
		TimelineEvent entity = this.loadTimelineEventFromTimelineEventOutVO(timelineEventOutVO);
		this.timelineEventOutVOToEntity(timelineEventOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void timelineEventOutVOToEntity(
			TimelineEventOutVO source,
			TimelineEvent target,
			boolean copyIfNull) {
		super.timelineEventOutVOToEntity(source, target, copyIfNull);
		TimelineEventTypeVO typeVO = source.getType();
		TrialOutVO trialVO = source.getTrial();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		VariablePeriodVO reminderPeriodVO = source.getReminderPeriod();
		EventImportanceVO importanceVO = source.getImportance();
		if (typeVO != null) {
			target.setType(this.getTimelineEventTypeDao().timelineEventTypeVOToEntity(typeVO));
		} else if (copyIfNull) {
			target.setType(null);
		}
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addEvents(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeEvents(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
		if (reminderPeriodVO != null) {
			target.setReminderPeriod(reminderPeriodVO.getPeriod());
		} else if (copyIfNull) {
			target.setReminderPeriod(null);
		}
		if (importanceVO != null) {
			target.setImportance(importanceVO.getImportance());
		} else if (copyIfNull) {
			target.setImportance(null);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TimelineEventInVO toTimelineEventInVO(final TimelineEvent entity) {
		return super.toTimelineEventInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toTimelineEventInVO(
			TimelineEvent source,
			TimelineEventInVO target) {
		super.toTimelineEventInVO(source, target);
		TimelineEventType type = source.getType();
		Trial trial = source.getTrial();
		if (type != null) {
			target.setTypeId(type.getId());
		}
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public TimelineEventOutVO toTimelineEventOutVO(final TimelineEvent entity) {
		return super.toTimelineEventOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toTimelineEventOutVO(
			TimelineEvent source,
			TimelineEventOutVO target) {
		super.toTimelineEventOutVO(source, target);
		TimelineEventType type = source.getType();
		Trial trial = source.getTrial();
		User modifiedUser = source.getModifiedUser();
		if (type != null) {
			target.setType(this.getTimelineEventTypeDao().toTimelineEventTypeVO(type));
		}
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setReminderPeriod(L10nUtil.createVariablePeriodVO(Locales.USER, source.getReminderPeriod()));
		target.setImportance(L10nUtil.createEventImportanceVO(Locales.USER, source.getImportance()));
		ReminderEntityAdapter reminderItem = ReminderEntityAdapter.getInstance(source);
		Date today = new Date();
		if (target.getReminderStart() == null) {
			target.setReminderStart(reminderItem.getReminderStart(today, false, null, null));
		}
	}
}