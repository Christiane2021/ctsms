// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;

import org.hibernate.Criteria;
import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.VariablePeriod;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.CommonUtil;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.ProbandGroupOutVO;
import org.phoenixctms.ctsms.vo.TrialOutVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vo.VisitOutVO;
import org.phoenixctms.ctsms.vo.VisitScheduleItemInVO;
import org.phoenixctms.ctsms.vo.VisitScheduleItemOutVO;

/**
 * @see VisitScheduleItem
 */
public class VisitScheduleItemDaoImpl
		extends VisitScheduleItemDaoBase {

	private final static String TOKEN_SEPARATOR_STRING = ":";

	private static final void applyTrialGroupVisitCriterions(org.hibernate.Criteria visitScheduleItemCriteria, Long trialId, Long groupId, Long visitId) {
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("group.id", groupId.longValue()));
		} else {
			visitScheduleItemCriteria.add(Restrictions.isNull("group.id"));
		}
		if (visitId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("visit.id", visitId.longValue()));
		} else {
			visitScheduleItemCriteria.add(Restrictions.isNull("visit.id"));
		}
	}

	private static final void applyTrialGroupVisitTokenCriterions(org.hibernate.Criteria visitScheduleItemCriteria, Long trialId, Long groupId, Long visitId, String token) {
		applyTrialGroupVisitCriterions(visitScheduleItemCriteria, trialId, groupId, visitId);
		if (token != null && token.length() > 0) {
			visitScheduleItemCriteria.add(Restrictions.eq("token", token));
		} else {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("token", ""), Restrictions.isNull("token")));
		}
	}

	private static final String getVisitScheduleItemName(Visit visit, ProbandGroup group, String token) {
		StringBuilder sb = new StringBuilder();
		if (group != null) {
			sb.append(group.getToken());
		}
		if (visit != null) {
			if (sb.length() > 0) {
				sb.append(TOKEN_SEPARATOR_STRING);
			}
			sb.append(visit.getToken());
		}
		if (token != null && token.length() > 0) {
			if (sb.length() > 0) {
				sb.append(TOKEN_SEPARATOR_STRING);
			}
			sb.append(token);
		}
		return sb.toString();
	}

	private org.hibernate.Criteria createVisitScheduleItemCriteria(String alias) {
		org.hibernate.Criteria visitScheduleItemCriteria;
		if (alias != null && alias.length() > 0) {
			visitScheduleItemCriteria = this.getSession().createCriteria(VisitScheduleItem.class, alias);
		} else {
			visitScheduleItemCriteria = this.getSession().createCriteria(VisitScheduleItem.class);
		}
		return visitScheduleItemCriteria;
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindByDepartmentTravelInterval(Long departmentId, Timestamp from, Timestamp to, Boolean travel) throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria("visitScheduleItem");
		CriteriaUtil.applyClosedIntervalCriterion(visitScheduleItemCriteria, from, to, null);
		if (departmentId != null) {
			visitScheduleItemCriteria.createCriteria("trial").add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (travel != null) {
			visitScheduleItemCriteria.createCriteria("visit.type", CriteriaSpecification.LEFT_JOIN).add(
					Restrictions.or(Restrictions.eq("travel", travel.booleanValue()),
							Restrictions.isNull("visitScheduleItem.visit")));
		}
		return visitScheduleItemCriteria.list();
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindByInterval(Long trialId, Long groupId,
			Timestamp from, Timestamp to) throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		CriteriaUtil.applyClosedIntervalCriterion(visitScheduleItemCriteria, from, to, null);
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("group.id", groupId.longValue()),
					Restrictions.isNull("group.id")));
		}
		return visitScheduleItemCriteria.list();
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindByTrialDepartmentStatusTypeIntervalId(Long trialId,
			Long departmentId, Long statusId, Long visitTypeId, Timestamp from, Timestamp to, Long id)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria("visitScheduleItem");
		org.hibernate.criterion.Criterion idCriterion;
		if (id != null) {
			idCriterion = Restrictions.eq("visitScheduleItem.id", id.longValue());
		} else {
			idCriterion = null;
		}
		CriteriaUtil.applyClosedIntervalCriterion(visitScheduleItemCriteria, from, to, idCriterion);
		if (trialId != null || departmentId != null || statusId != null) {
			Criteria trialCriteria = visitScheduleItemCriteria.createCriteria("trial", CriteriaSpecification.INNER_JOIN); // ? inner join because trial is never null
			if (trialId != null) {
				trialCriteria.add(CriteriaUtil.applyOr(Restrictions.idEq(trialId.longValue()), idCriterion));
			}
			if (departmentId != null) {
				trialCriteria.add(CriteriaUtil.applyOr(Restrictions.eq("department.id", departmentId.longValue()), idCriterion));
			}
			if (statusId != null) {
				trialCriteria.add(CriteriaUtil.applyOr(Restrictions.eq("status.id", statusId.longValue()), idCriterion));
			}
		}
		if (visitTypeId != null) {
			Criteria visitCriteria = visitScheduleItemCriteria.createCriteria("visit", CriteriaSpecification.INNER_JOIN); // ? inner join because trial is never null
			visitCriteria.add(CriteriaUtil.applyOr(Restrictions.eq("type.id", visitTypeId.longValue()), idCriterion));
		}
		return visitScheduleItemCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<VisitScheduleItem> handleFindByTrialGroupVisitProbandTravel(Long trialId, Long groupId, Long visitId, Long probandId, Boolean travel, PSFVO psf)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria("visitScheduleItem");
		SubCriteriaMap criteriaMap = new SubCriteriaMap(VisitScheduleItem.class, visitScheduleItemCriteria);
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("group.id", groupId.longValue()),
					Restrictions.isNull("group.id")));
		}
		if (visitId != null) {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("visit.id", visitId.longValue()),
					Restrictions.isNull("visit.id")));
		}
		if (probandId != null) {
			criteriaMap.createCriteria("trial.probandListEntries").add(Restrictions.eq("proband.id", probandId.longValue()));
			criteriaMap.createCriteria("group.probandListEntries", CriteriaSpecification.LEFT_JOIN).add(
					Restrictions.or(Restrictions.eq("proband.id", probandId.longValue()),
							Restrictions.isNull("visitScheduleItem.group")));
		}
		if (travel != null) {
			criteriaMap.createCriteria("visit.type", CriteriaSpecification.LEFT_JOIN).add(
					Restrictions.or(Restrictions.eq("travel", travel.booleanValue()),
							Restrictions.isNull("visitScheduleItem.visit")));
		}
		if (probandId == null) {
			CriteriaUtil.applyPSFVO(criteriaMap, psf); // proband has only one probandlistentry, and listentry has only one group, but left joins
			return visitScheduleItemCriteria.list();
		} else {
			return CriteriaUtil.listDistinctRootPSFVO(criteriaMap, psf, this);
		}
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindByTrialSorted(Long trialId, boolean sort, PSFVO psf)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(VisitScheduleItem.class, visitScheduleItemCriteria);
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf); // proband has only one probandlistentry, and listentry has only one group, but left joins
		if (sort) {
			visitScheduleItemCriteria.addOrder(Order.asc("trial"));
			Criteria visitCriteria = visitScheduleItemCriteria.createCriteria("visit", CriteriaSpecification.LEFT_JOIN);
			visitCriteria.addOrder(Order.asc("token"));
			Criteria groupCriteria = visitScheduleItemCriteria.createCriteria("group", CriteriaSpecification.LEFT_JOIN);
			groupCriteria.addOrder(Order.asc("token"));
			visitScheduleItemCriteria.addOrder(Order.asc("token"));
		}
		return visitScheduleItemCriteria.list();
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindCollidingTrialGroupVisit(Long trialId, Long groupId, Long visitId) throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		applyTrialGroupVisitCriterions(visitScheduleItemCriteria, trialId, groupId, visitId);
		return visitScheduleItemCriteria.list();
	}

	@Override
	protected Timestamp handleFindMaxStop(Long trialId, Long groupId, Long visitId)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		applyTrialGroupVisitCriterions(visitScheduleItemCriteria, trialId, groupId, visitId);
		visitScheduleItemCriteria.setProjection(Projections.max("stop"));
		return (Timestamp) visitScheduleItemCriteria.uniqueResult();
	}

	@Override
	protected Timestamp handleFindMaxStop(Long trialId, Long groupId, Long visitId, String token)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		applyTrialGroupVisitTokenCriterions(visitScheduleItemCriteria, trialId, groupId, visitId, token);
		visitScheduleItemCriteria.setProjection(Projections.max("stop"));
		return (Timestamp) visitScheduleItemCriteria.uniqueResult();
	}

	@Override
	protected Timestamp handleFindMinStart(Long trialId, Long groupId, Long visitId)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		applyTrialGroupVisitCriterions(visitScheduleItemCriteria, trialId, groupId, visitId);
		visitScheduleItemCriteria.setProjection(Projections.min("start"));
		return (Timestamp) visitScheduleItemCriteria.uniqueResult();
	}

	@Override
	protected Timestamp handleFindMinStart(Long trialId, Long groupId, Long visitId, String token)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		applyTrialGroupVisitTokenCriterions(visitScheduleItemCriteria, trialId, groupId, visitId, token);
		visitScheduleItemCriteria.setProjection(Projections.min("start"));
		return (Timestamp) visitScheduleItemCriteria.uniqueResult();
	}

	@Override
	protected Collection<VisitScheduleItem> handleFindVisitScheduleItemSchedule(
			Date today, Long trialId, Long departmentId, Boolean notify, Boolean ignoreTimelineEvents, VariablePeriod reminderPeriod, Long reminderPeriodDays,
			boolean includeAlreadyPassed, PSFVO psf)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria(null);
		SubCriteriaMap criteriaMap = new SubCriteriaMap(VisitScheduleItem.class, visitScheduleItemCriteria);
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (departmentId != null) {
			criteriaMap.createCriteria("trial").add(Restrictions.eq("department.id", departmentId.longValue()));
		}
		if (ignoreTimelineEvents != null) {
			criteriaMap.createCriteria("trial.status").add(Restrictions.eq("ignoreTimelineEvents", ignoreTimelineEvents.booleanValue()));
		}
		if (notify != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("notify", notify.booleanValue()));
		}
		visitScheduleItemCriteria.add(Restrictions.ge("stop", CommonUtil.dateToTimestamp(today)));
		if (psf != null) {
			PSFVO sorterFilter = new PSFVO();
			sorterFilter.setFilters(psf.getFilters());
			sorterFilter.setSortField(psf.getSortField());
			sorterFilter.setSortOrder(psf.getSortOrder());
			CriteriaUtil.applyPSFVO(criteriaMap, sorterFilter); // staff is not unique in team members
		} else {
			visitScheduleItemCriteria.setResultTransformer(CriteriaSpecification.ROOT_ENTITY);
		}
		ArrayList<VisitScheduleItem> resultSet = CriteriaUtil.listReminders(visitScheduleItemCriteria, today, notify, includeAlreadyPassed, reminderPeriod, reminderPeriodDays);
		return CriteriaUtil.applyPVO(resultSet, psf, false); // no dupes here any more
	}

	@Override
	protected long handleGetCount(Long trialId, Long groupId, Long visitId, Long probandId, Boolean travel)
			throws Exception {
		Criteria visitScheduleItemCriteria = createVisitScheduleItemCriteria("visitScheduleItem");
		if (trialId != null) {
			visitScheduleItemCriteria.add(Restrictions.eq("trial.id", trialId.longValue()));
		}
		if (groupId != null) {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("group.id", groupId.longValue()),
					Restrictions.isNull("group.id")));
		}
		if (visitId != null) {
			visitScheduleItemCriteria.add(Restrictions.or(Restrictions.eq("visit.id", visitId.longValue()),
					Restrictions.isNull("visit.id")));
		}
		if (probandId != null) {
			Criteria trialCriteria = visitScheduleItemCriteria.createCriteria("trial");
			trialCriteria.createCriteria("probandListEntries").add(Restrictions.eq("proband.id", probandId.longValue()));
			Criteria groupCriteria = visitScheduleItemCriteria.createCriteria("group", CriteriaSpecification.LEFT_JOIN);
			groupCriteria.createCriteria("probandListEntries", CriteriaSpecification.LEFT_JOIN).add(
					Restrictions.or(Restrictions.eq("proband.id", probandId.longValue()),
							Restrictions.isNull("visitScheduleItem.group")));
		}
		if (travel != null) {
			visitScheduleItemCriteria.createCriteria("visit.type", CriteriaSpecification.LEFT_JOIN).add(
					Restrictions.or(Restrictions.eq("travel", travel.booleanValue()),
							Restrictions.isNull("visitScheduleItem.visit")));
		}
		if (probandId == null) {
			return (Long) visitScheduleItemCriteria.setProjection(Projections.rowCount()).uniqueResult();
		} else {
			return (Long) visitScheduleItemCriteria.setProjection(Projections.countDistinct("id")).uniqueResult();
		}
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private VisitScheduleItem loadVisitScheduleItemFromVisitScheduleItemInVO(VisitScheduleItemInVO visitScheduleItemInVO) {
		VisitScheduleItem visitScheduleItem = null;
		Long id = visitScheduleItemInVO.getId();
		if (id != null) {
			visitScheduleItem = this.load(id);
		}
		if (visitScheduleItem == null) {
			visitScheduleItem = VisitScheduleItem.Factory.newInstance();
		}
		return visitScheduleItem;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private VisitScheduleItem loadVisitScheduleItemFromVisitScheduleItemOutVO(VisitScheduleItemOutVO visitScheduleItemOutVO) {
		VisitScheduleItem visitScheduleItem = this.load(visitScheduleItemOutVO.getId());
		if (visitScheduleItem == null) {
			visitScheduleItem = VisitScheduleItem.Factory.newInstance();
		}
		return visitScheduleItem;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitScheduleItemInVO toVisitScheduleItemInVO(final VisitScheduleItem entity) {
		return super.toVisitScheduleItemInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toVisitScheduleItemInVO(
			VisitScheduleItem source,
			VisitScheduleItemInVO target) {
		super.toVisitScheduleItemInVO(source, target);
		Trial trial = source.getTrial();
		Visit visit = source.getVisit();
		ProbandGroup group = source.getGroup();
		if (trial != null) {
			target.setTrialId(trial.getId());
		}
		if (visit != null) {
			target.setVisitId(visit.getId());
		}
		if (group != null) {
			target.setGroupId(group.getId());
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitScheduleItemOutVO toVisitScheduleItemOutVO(final VisitScheduleItem entity) {
		return super.toVisitScheduleItemOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toVisitScheduleItemOutVO(
			VisitScheduleItem source,
			VisitScheduleItemOutVO target) {
		super.toVisitScheduleItemOutVO(source, target);
		Trial trial = source.getTrial();
		Visit visit = source.getVisit();
		ProbandGroup group = source.getGroup();
		User modifiedUser = source.getModifiedUser();
		if (trial != null) {
			target.setTrial(this.getTrialDao().toTrialOutVO(trial));
		}
		if (visit != null) {
			target.setVisit(this.getVisitDao().toVisitOutVO(visit));
		}
		if (group != null) {
			target.setGroup(this.getProbandGroupDao().toProbandGroupOutVO(group));
		}
		if (modifiedUser != null) {
			target.setModifiedUser(this.getUserDao().toUserOutVO(modifiedUser));
		}
		target.setName(getVisitScheduleItemName(visit, group, source.getToken()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitScheduleItem visitScheduleItemInVOToEntity(VisitScheduleItemInVO visitScheduleItemInVO) {
		VisitScheduleItem entity = this.loadVisitScheduleItemFromVisitScheduleItemInVO(visitScheduleItemInVO);
		this.visitScheduleItemInVOToEntity(visitScheduleItemInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void visitScheduleItemInVOToEntity(
			VisitScheduleItemInVO source,
			VisitScheduleItem target,
			boolean copyIfNull) {
		super.visitScheduleItemInVOToEntity(source, target, copyIfNull);
		Long trialId = source.getTrialId();
		Long visitId = source.getVisitId();
		Long groupId = source.getGroupId();
		if (trialId != null) {
			Trial trial = this.getTrialDao().load(trialId);
			target.setTrial(trial);
			trial.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeVisitScheduleItems(target);
			}
		}
		if (visitId != null) {
			Visit visit = this.getVisitDao().load(visitId);
			target.setVisit(visit);
			visit.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeVisitScheduleItems(target);
			}
		}
		if (groupId != null) {
			ProbandGroup group = this.getProbandGroupDao().load(groupId);
			target.setGroup(group);
			group.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			ProbandGroup group = target.getGroup();
			target.setGroup(null);
			if (group != null) {
				group.removeVisitScheduleItems(target);
			}
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public VisitScheduleItem visitScheduleItemOutVOToEntity(VisitScheduleItemOutVO visitScheduleItemOutVO) {
		VisitScheduleItem entity = this.loadVisitScheduleItemFromVisitScheduleItemOutVO(visitScheduleItemOutVO);
		this.visitScheduleItemOutVOToEntity(visitScheduleItemOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void visitScheduleItemOutVOToEntity(
			VisitScheduleItemOutVO source,
			VisitScheduleItem target,
			boolean copyIfNull) {
		super.visitScheduleItemOutVOToEntity(source, target, copyIfNull);
		TrialOutVO trialVO = source.getTrial();
		VisitOutVO visitVO = source.getVisit();
		ProbandGroupOutVO groupVO = source.getGroup();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (trialVO != null) {
			Trial trial = this.getTrialDao().trialOutVOToEntity(trialVO);
			target.setTrial(trial);
			trial.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			Trial trial = target.getTrial();
			target.setTrial(null);
			if (trial != null) {
				trial.removeVisitScheduleItems(target);
			}
		}
		if (visitVO != null) {
			Visit visit = this.getVisitDao().visitOutVOToEntity(visitVO);
			target.setVisit(visit);
			visit.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			Visit visit = target.getVisit();
			target.setVisit(null);
			if (visit != null) {
				visit.removeVisitScheduleItems(target);
			}
		}
		if (groupVO != null) {
			ProbandGroup group = this.getProbandGroupDao().probandGroupOutVOToEntity(groupVO);
			target.setGroup(group);
			group.addVisitScheduleItems(target);
		} else if (copyIfNull) {
			ProbandGroup group = target.getGroup();
			target.setGroup(null);
			if (group != null) {
				group.removeVisitScheduleItems(target);
			}
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}
}