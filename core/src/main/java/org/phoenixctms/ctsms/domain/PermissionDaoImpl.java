// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.Collection;
import java.util.Set;

import org.hibernate.criterion.CriteriaSpecification;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.criterion.Subqueries;
import org.phoenixctms.ctsms.enumeration.PermissionProfile;

/**
 * @see Permission
 */
public class PermissionDaoImpl
		extends PermissionDaoBase {

	private org.hibernate.Criteria createPermissionCriteria() {
		org.hibernate.Criteria permissionCritria = this.getSession().createCriteria(Permission.class);
		return permissionCritria;
	}

	@Override
	protected Collection<Permission> handleFindByServiceMethodUser(
			String serviceMethod, Long userId, Boolean profilePermissionActive,
			Boolean userPermissionProfileActive, Set<PermissionProfile> profiles) throws Exception {
		org.hibernate.Criteria permissionCritria = createPermissionCriteria();
		if (serviceMethod != null) {
			permissionCritria.add(Restrictions.eq("serviceMethod", serviceMethod));
		}
		if (userId != null || profilePermissionActive != null || userPermissionProfileActive != null || profiles != null) {
			org.hibernate.Criteria profilePermissionCritria = permissionCritria.createCriteria("profilePermissions", CriteriaSpecification.LEFT_JOIN);
			if (profilePermissionActive != null) {
				profilePermissionCritria.add(Restrictions.eq("active", profilePermissionActive.booleanValue()));
			}
			if (userId != null || userPermissionProfileActive != null) {
				DetachedCriteria subQuery = DetachedCriteria.forClass(UserPermissionProfileImpl.class, "userPermissionProfile"); // IMPL!!!!
				subQuery.setProjection(Projections.projectionList().add(Projections.property("profile")));
				if (userId != null) {
					subQuery.add(Restrictions.eq("user.id", userId.longValue()));
				}
				if (userPermissionProfileActive != null) {
					subQuery.add(Restrictions.eq("active", userPermissionProfileActive.booleanValue()));
				}
				profilePermissionCritria.add(Subqueries.propertyIn("profile", subQuery));
			} else if (profiles != null) {
				profilePermissionCritria.add(Restrictions.in("profile", profiles));
			}
		}
		return permissionCritria.list();
	}
}